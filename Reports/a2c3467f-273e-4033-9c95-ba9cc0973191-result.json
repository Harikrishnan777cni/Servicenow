{"name": "test_password_reset_module_end_user[chrome]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Pages.AskAQuestionModuleEndUser.AskAQuestionModuleEndUser object at 0x7ff0064070a0>\n\n    def fill_ask_a_question_module_fields_end_user(self):\n        try:\n            self.click(Locators.SEARCH_TEXTBOX_MODULE_END_USER)\n            self.enter_text(Locators.SEARCH_TEXTBOX_MODULE_END_USER, \"Ask a Question\")\n            time.sleep(3)\n            # self.driver.implicitly_wait(10)\n            self.send_enter(Locators.SEARCH_TEXTBOX_MODULE_END_USER)\n            time.sleep(2)\n            # self.driver.implicitly_wait(10)\n            self.click(Locators.ASK_A_QUESTION_CLICK)\n    \n            time.sleep(2)\n            # self.driver.implicitly_wait(10)\n            self.fill_office()\n>           self.fill_summary()\n\nPages/AskAQuestionModuleEndUser.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.AskAQuestionModuleEndUser.AskAQuestionModuleEndUser object at 0x7ff0064070a0>\n\n    def fill_summary(self):\n        time.sleep(4)\n>       self.click(Locators.SUMMARY_ASK_A_QUESTION_TEXTBOX)\n\nPages/AskAQuestionModuleEndUser.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.AskAQuestionModuleEndUser.AskAQuestionModuleEndUser object at 0x7ff0064070a0>, by_locator = ('id', 'sp_formfield_short_description')\n\n    def click(self, by_locator):\n>       WebDriverWait(self.driver, 100).until(EC.visibility_of_element_located(by_locator)).click()\n\nPages/BasePage.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"e3a1fe3d800aa67398cafb6518445ce2\", element=\"164a8556-35f0-4a84-8302-629a82518535\")>\n\n    def click(self):\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webelement.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"e3a1fe3d800aa67398cafb6518445ce2\", element=\"164a8556-35f0-4a84-8302-629a82518535\")>, command = 'clickElement'\nparams = {'id': '164a8556-35f0-4a84-8302-629a82518535', 'sessionId': 'e3a1fe3d800aa67398cafb6518445ce2'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e3a1fe3d800aa67398cafb6518445ce2\")>, driver_command = 'clickElement', params = {'id': '164a8556-35f0-4a84-8302-629a82518535'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff006407550>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff687dc109 _pthread_start + 148\\\\n24  libsystem_pthread.dylib             0x00007fff687d7b8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input ng-if=\"::!field.max_length || 256 > field.max_length || field._force_single_line\" name=\"short_description\" id=\"sp_formfield_short_description\" class=\"form-control ng-pristine ng-untouched ng-valid ng-scope ng-empty ng-valid-maxlength\" maxlength=\"\" data-type=\"{{::field.type}}\" ng-model=\"field.stagedValue\" ng-model-options=\"{allowInvalid: true}\" ng-change=\"stagedValueChange()\" autocomplete=\"off\" ng-readonly=\"field.isReadonly()\" ng-attr-placeholder=\"{{field.placeholder}}\" type=\"string\" aria-required=\"true\" aria-invalid=\"false\"> is not clickable at point (453, 555). Other element would receive the click: <div id=\"select2-drop-mask\" class=\"select2-drop-mask\" style=\"\"></div>\nE         (Session info: chrome=96.0.4664.55)\n\n../../Library/Python/3.9/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.test_ask_a_question_module_end_user.TestAskAQuestionModuleEndUser object at 0x7ff006331df0>\n\n    def test_password_reset_module_end_user(self):\n        print(\"inside\")\n        self.driver.get(\"https://supporttest.condenastint.com/sp\")\n        time.sleep(3)\n        login_cred_obj = LoginCred(self.driver)\n        login_cred_obj.login_cred()\n        time.sleep(40)\n        self.ask_a_question_module_end_use_obj = AskAQuestionModuleEndUser(self.driver)\n>       self.ask_a_question_module_end_use_obj.fill_ask_a_question_module_fields_end_user()\n\nTestCases/test_ask_a_question_module_end_user.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.AskAQuestionModuleEndUser.AskAQuestionModuleEndUser object at 0x7ff0064070a0>\n\n    def fill_ask_a_question_module_fields_end_user(self):\n        try:\n            self.click(Locators.SEARCH_TEXTBOX_MODULE_END_USER)\n            self.enter_text(Locators.SEARCH_TEXTBOX_MODULE_END_USER, \"Ask a Question\")\n            time.sleep(3)\n            # self.driver.implicitly_wait(10)\n            self.send_enter(Locators.SEARCH_TEXTBOX_MODULE_END_USER)\n            time.sleep(2)\n            # self.driver.implicitly_wait(10)\n            self.click(Locators.ASK_A_QUESTION_CLICK)\n    \n            time.sleep(2)\n            # self.driver.implicitly_wait(10)\n            self.fill_office()\n            self.fill_summary()\n            self.fill_description()\n            self.click_submit()\n    \n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Ask a question\",\n                          attachment_type=AttachmentType.PNG)\n        except:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\" Ask a question\",\n                          attachment_type=AttachmentType.PNG)\n>           assert False\nE           AssertionError\n\nPages/AskAQuestionModuleEndUser.py:72: AssertionError"}, "attachments": [{"name": " Ask a question", "source": "2b71a12c-1be2-43c3-af0a-e623f99e5231-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "3cdbb955-8077-4946-b761-1ae8e0a311c3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1638169368220, "stop": 1638169466040, "uuid": "fedbfcc4-d6c3-4eb6-b21e-a09f8d5ae50a", "historyId": "0f7cfd69b5f3194bbd57044ed8d2129a", "testCaseId": "1106bba0b3cfd0e80217165936b26146", "fullName": "TestCases.test_ask_a_question_module_end_user.TestAskAQuestionModuleEndUser#test_password_reset_module_end_user", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_ask_a_question_module_end_user"}, {"name": "subSuite", "value": "TestAskAQuestionModuleEndUser"}, {"name": "host", "value": "X7E062921133115"}, {"name": "thread", "value": "58724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_ask_a_question_module_end_user"}]}